// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  username            String             @unique
  timezone            String             @default("Asia/Kolkata") // IANA timezone
  resetHour           Int                @default(0) // 0 = midnight, 4 = 4 AM reset
  surname             String?
  email               String?            @unique
  emailVerified       DateTime?
  hashedPassword      String?
  image               String?
  bio                 String?
  fcmToken            FcmToken[]
  sessions            Session[]
  accounts            Account[]
  completedOnboarding Boolean            @default(false)
  createdGroups       Group[]            @relation("CreatedBy")
  subscriptions       Subscription[]
  pomodoroSettings    PomodoroSettings[]
  activities          Activity[]
  message             Message[]

  todos                 Todo[]
  announcements         Announcement[]
  announcementComments  Comment[]
  announcementViews     AnnouncementView[]
  announcementReactions AnnouncementReaction[]
  commentReactions      CommentReaction[]
  notifications         Notification[]
  receivedWarnings      Warning[]              @relation("ReceivedWarnings")
  issuedWarnings        Warning[]              @relation("IssuedWarnings")
  messageViews          MessageView[]
  readReceipt           ChatReadReceipt[]

  createdAt DateTime @default(now())

  dailyTotal      DailyTotal[]
  focusAreas      FocusArea[]
  timerSegments   TimerSegment[]
  MessageReaction MessageReaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FcmToken {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  createdAt  DateTime @default(now())
  lastSeenAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserPermission {
  ADMIN
  CAN_EDIT
  READ_ONLY
  OWNER
}

model Group {
  id            String         @id @default(cuid())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String?
  creator       User?          @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  image         String?
  description   String?
  isPrivate     Boolean        @default(false)
  password      String?
  color         GroupIconColor @default(BLUE)
  inviteCode    String         @unique
  adminCode     String         @unique
  canEditCode   String         @unique
  readOnlyCode  String         @unique
  subscribers   Subscription[]
  chat          Chat[]
  announcements Announcement[]
  warnings      Warning[]

  @@index([creatorId])
}

enum GroupIconColor {
  PURPLE
  RED
  GREEN
  BLUE
  PINK
  YELLOW
  LIME
  EMERALD
  INDIGO
  FUCHSIA
  ORANGE
  CYAN
}

model Subscription {
  userId   String
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId  String
  group    Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userRole UserPermission @default(READ_ONLY)

  @@id([userId, groupId])
  @@index([groupId])
  @@index([userId])
}

// ------ ANNOUNCEMENT THINGY STARTS ------------
model Announcement {
  id        String                 @id @default(uuid())
  author    User                   @relation(fields: [userId], references: [id])
  userId    String
  group     Group                  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  title     String
  content   Json
  notice    Boolean                @default(false)
  comments  Comment[]
  reactions AnnouncementReaction[]
  views     AnnouncementView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId])
  @@index([userId])
}

model Comment {
  id             String            @id @default(uuid())
  author         User              @relation(fields: [userId], references: [id])
  userId         String
  announcement   Announcement      @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  reactions      CommentReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([announcementId])
  @@index([userId])
}

model AnnouncementReaction {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  announcementId String
  type           Reactions
  createdAt      DateTime     @default(now())

  @@index([announcementId, type])
}

model CommentReaction {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment   @relation(fields: [commentId], references: [id])
  commentId String
  type      Reactions
  createdAt DateTime  @default(now())
}

model AnnouncementView {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  announcementId String
  viewed         Boolean      @default(false)
  seenAt         DateTime     @default(now())

  @@id([userId, announcementId])
}

enum Reactions {
  LIKE
  HEART
  WOW
  HAHA
  FIRE
  CRY
  TICK
  CROSS
}

// ------ ANNOUNCEMENT THINGY ENDS ------------

model PomodoroSettings {
  id                 String              @id @default(cuid())
  userId             String
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  workDuration       Int                 @default(25)
  shortBreakDuration Int                 @default(5)
  longBreakDuration  Int                 @default(15)
  longBreakInterval  Int                 @default(2)
  rounds             Int                 @default(3)
  soundEffect        PomodoroSoundEffect @default(BELL)
  soundEffectVolume  Float               @default(0.5)
}

enum PomodoroSoundEffect {
  ANALOG
  BIRD
  CHURCH_BELL
  DIGITAL
  FANCY
  BELL
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  timeSpent Int      @default(0) // store time in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimerSegment {
  id          String      @id @default(uuid())
  userId      String
  focusAreaId String?
  start       DateTime // UTC
  end         DateTime? // UTC
  duration    Int? // in seconds
  // date        DateTime // normalized to midnight
  type        SegmentType @default(FOCUS) // <-- NEW: FOCUS or BREAK
  label       String? // <-- Optional label for break reason (e.g. "Lunch", "Phone")

  user      User       @relation(fields: [userId], references: [id])
  focusArea FocusArea? @relation(fields: [focusAreaId], references: [id], onDelete: Cascade)

  @@index([userId, start])
}

enum SegmentType {
  FOCUS
  BREAK
}

model FocusArea {
  id       String         @id @default(uuid())
  name     String
  userId   String
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  segments TimerSegment[]
  todos    Todo[]
}

model Todo {
  id          String       @id @default(uuid())
  userId      String
  focusAreaId String
  title       String
  content     String?
  completed   TodoWorkDone @default(NOT_DONE)
  date        DateTime // normalized to midnight

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  focusArea FocusArea @relation(fields: [focusAreaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([focusAreaId])
}

enum TodoWorkDone {
  DONE
  NOT_DONE
  HALF_DONE
}

model DailyTotal {
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  date           DateTime // midnight UTC for storage
  totalSeconds   Int
  isRunning      Boolean   @default(false)
  startTimestamp DateTime?

  @@unique([userId, date])
}

model Chat {
  id           String            @id @default(cuid())
  group        Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId      String
  messages     Message[]
  readReceipts ChatReadReceipt[]
}

model Message {
  id       String @id @default(uuid())
  chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  content  String
   attachments Attachment[]

  replyTo   Message? @relation("ReplySelfRelation", fields: [replyToId], references: [id])
  replyToId String?

  replies   Message[]         @relation("ReplySelfRelation")
  views     MessageView[]
  reactions MessageReaction[]

  createdAt DateTime  @default(now())

  isEdited  Boolean   @default(false)
  updatedAt DateTime? @updatedAt
  isDeleted Boolean   @default(false)

  @@index([chatId])
  @@index([chatId, createdAt])
}

model MessageView {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  seenAt DateTime @default(now())

  @@id([userId, messageId])
  @@index([userId])
  @@index([messageId])
}

model ChatReadReceipt {
  userId            String
  chatId            String
  lastSeenMessageId String? // nullable if user never read anything
  lastSeenAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@id([userId, chatId]) // unique per user per chat
  @@index([chatId])
  @@index([lastSeenAt])
}

model MessageReaction {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  @@unique([messageId, userId])
  @@index([messageId])
}

model Mute {
  id        String    @id @default(cuid())
  userId    String
  groupId   String
  mutedBy   String
  reason    String?
  createdAt DateTime  @default(now())
  expiresAt DateTime? // null => indefinite mute

  @@unique([userId, groupId])
  @@index([groupId])
  @@index([userId, groupId])
}

model Attachment {
  id          String   @id @default(cuid())
  messageId   String?  // optional if you upload before creating message
  message     Message?  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  chatId      String
  groupId     String
  uploaderId  String
  storagePath String   // path inside bucket: e.g. attachments/{groupId}/{uuid}.jpg
  mime        String
  size        Int
  width       Int?
  height      Int?
  thumbPath   String?  // optional generated thumbnail path
  createdAt   DateTime @default(now())

  @@index([chatId])
  @@index([groupId])
  @@index([uploaderId])
}


// NOTIFICATION SYSTEM

model Notification {
  id        String    @id @default(cuid())
  userId    String // Recipient
  senderId  String? // Optional: who triggered it
  type      NotifType
  message   String
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

enum NotifType {
  MESSAGE
  TIMER_ENDED
  TEAM_ALERT
  WAKE_UP
  WARNING
  USER_JOINED
  USER_LEFT
  NEW_ANNOUNCEMENT
  NOTICE
  COMMENT
  REPLY
}

model Warning {
  id         String   @id @default(cuid())
  userId     String
  groupId    String
  issuedById String // Admin or owner who gave the warning
  message    String
  createdAt  DateTime @default(now())

  user     User  @relation("ReceivedWarnings", fields: [userId], references: [id], onDelete: Cascade)
  issuedBy User  @relation("IssuedWarnings", fields: [issuedById], references: [id], onDelete: Cascade)
  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([userId, groupId])
}
